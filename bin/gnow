#!/bin/bash

# テキストカラー
function green  { echo -e "\e[32m$*\e[m"; }
function red { echo -e "\e[31m$*\e[m"; }
function yellow { echo -e "\e[33m$*\e[m"; }

GIT_STATUS=`git status -s`
DATE=`date +'%Y-%m-%d %T'`
BRANCH=`git rev-parse --abbrev-ref HEAD`
BRANCH_EXIST=`git branch`

# バージョン表示
VERSION=v1.0.0

# コミット処理
function fast_commit {
    # コミットメッセージ引数が無い場合は日付とステータスをメッセージとする
    if [ -z "${1}" ]; then
        MESSAGE="${DATE} ${GIT_STATUS}"
    else
        MESSAGE="${1}"
    fi

    # ローカルのブランチが存在しない初回pushとみられる場合はmasterにpushする
    if [ -z "${BRANCH_EXIST}" ]; then
        BRANCH=master
        yellow 'Initial Commit'
    fi

    yellow 'message:'
    echo ${MESSAGE}
    yellow 'branch:'
    echo ${BRANCH}
    green "Ready? 'no' or press ENTER"

    read input
    if [ "${input}" = 'no' ] || [ "${input}" = 'NO' ] || [ "${input}" = 'n' ]; then
        exit 0
    else
        git add -A
        git commit -m "${MESSAGE}"
        git push origin ${BRANCH}
    fi
} # function fast_commit end

# タグ処理
function fast_tag {
    LATEST_TAG=`git tag | sed s/v//g | sort -t . -n -k1,1 -k2,2 -k3,3 | tail -n1`
    PATCH_VER=${LATEST_TAG##*.}
    PATCH_INCREMENT="${LATEST_TAG%.*}.$(( ${PATCH_VER} + 1 ))"
    NEW_TAG=${1}
    if [ -z ${NEW_TAG} ]; then
        green "Latest tag is ${LATEST_TAG}"
        green "Auto-incremented version is ${PATCH_INCREMENT}"
        green "Ready? 'no' or press ENTER"
	read input
        if [ "${input}" = 'no' ] || [ "${input}" = 'NO' ] || [ "${input}" = 'n' ]; then
	    exit 0
	else
	    git tag -a "v${PATCH_INCREMENT}" -m "v${PATCH_INCREMENT}"
	    git push origin --tags
        fi
    else
        green "Latest tag is ${LATEST_TAG}"
        green "New tag is ${NEW_TAG}"
        green "Ready? 'no' or press ENTER"
	read input
        if [ "${input}" = 'no' ] || [ "${input}" = 'NO' ] || [ "${input}" = 'n' ]; then
	    exit 0
	else
	    git tag -a "${NEW_TAG}" -m "${NEW_TAG}"
	    git push origin --tags
        fi
    fi
} # function fast_tag end

# 使い方
usage() {
    echo "Usage: $PROGNAME [OPTIONS] FILE"
    echo "  This script is ~."
    echo
    echo "Options:"
    echo "  -h, --help"
    echo "  -v, -V, --version"
    echo "  -t, --tag [ARG]"
    echo "  -b, --long-b [ARG]"
    echo "  -c, --long-c"
    echo
    exit 1
}

# 引数処理
for OPT in "$@"
do
    case $OPT in
        -h | --help)
            usage
            exit 1
            ;;
        -v | -V |--version)
            echo $VERSION
            exit 1
            ;;
        -t | --tag)
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                #echo "$PROGNAME: option requires an argument -- $1" 1>&2
		fast_tag
                exit 1
            else
		fast_tag $2
                exit 1
            fi
            shift 2
            ;;
        -- | -)
            shift 1
            param+=( "$@" )
            break
            ;;
        -*)
            echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;
        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
                #param=( ${param[@]} "$1" )
                param+=( "$1" )
                shift 1
                fast_commit "$param"
            fi
            ;;
    esac
done

# パラメーターが指定されなかった場合
if [ -z "$param" ]; then
    fast_commit
fi

exit
